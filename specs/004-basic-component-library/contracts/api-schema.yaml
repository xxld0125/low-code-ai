openapi: 3.0.3
info:
  title: 基础组件库 API
  description: 低代码平台基础组件库的RESTful API接口
  version: 1.0.0
  contact:
    name: 开发团队
    email: dev@lowcode-ai.com
servers:
  - url: http://localhost:3000/api
    description: 开发环境
  - url: https://lowcode-ai.com/api
    description: 生产环境

paths:
  /components:
    get:
      summary: 获取组件列表
      description: 获取所有可用的组件定义，支持分类过滤和搜索
      tags:
        - 组件管理
      parameters:
        - name: category
          in: query
          description: 组件分类过滤
          schema:
            type: string
            enum: [basic, display, layout, form, advanced, custom]
        - name: status
          in: query
          description: 组件状态过滤
          schema:
            type: string
            enum: [draft, active, deprecated, archived]
            default: active
        - name: search
          in: query
          description: 搜索关键词（搜索名称、描述、标签）
          schema:
            type: string
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 每页数量
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 成功返回组件列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      components:
                        type: array
                        items:
                          $ref: '#/components/schemas/ComponentDefinition'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: 创建新组件
      description: 创建一个新的组件定义
      tags:
        - 组件管理
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComponentRequest'
      responses:
        '201':
          description: 组件创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ComponentDefinition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /components/{componentId}:
    get:
      summary: 获取组件详情
      description: 根据组件ID获取组件的详细信息
      tags:
        - 组件管理
      parameters:
        - name: componentId
          in: path
          required: true
          description: 组件ID
          schema:
            type: string
      responses:
        '200':
          description: 成功返回组件详情
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ComponentDefinition'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: 更新组件
      description: 更新现有组件的定义和配置
      tags:
        - 组件管理
      security:
        - bearerAuth: []
      parameters:
        - name: componentId
          in: path
          required: true
          description: 组件ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComponentRequest'
      responses:
        '200':
          description: 组件更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ComponentDefinition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: 删除组件
      description: 删除指定的组件定义
      tags:
        - 组件管理
      security:
        - bearerAuth: []
      parameters:
        - name: componentId
          in: path
          required: true
          description: 组件ID
          schema:
            type: string
      responses:
        '200':
          description: 组件删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "组件删除成功"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: 组件正在使用中，无法删除
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /components/{componentId}/props:
    get:
      summary: 获取组件属性定义
      description: 获取指定组件的所有属性定义
      tags:
        - 属性管理
      parameters:
        - name: componentId
          in: path
          required: true
          description: 组件ID
          schema:
            type: string
        - name: group
          in: query
          description: 属性分组过滤
          schema:
            type: string
            enum: [basic, style, layout, advanced]
      responses:
        '200':
          description: 成功返回属性定义列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PropSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: 添加组件属性
      description: 为指定组件添加新的属性定义
      tags:
        - 属性管理
      security:
        - bearerAuth: []
      parameters:
        - name: componentId
          in: path
          required: true
          description: 组件ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePropRequest'
      responses:
        '201':
          description: 属性创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PropSchema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /components/{componentId}/preview:
    post:
      summary: 预览组件
      description: 根据给定的属性配置生成组件预览
      tags:
        - 组件预览
      parameters:
        - name: componentId
          in: path
          required: true
          description: 组件ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreviewRequest'
      responses:
        '200':
          description: 成功生成组件预览
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PreviewResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /components/{componentId}/validate:
    post:
      summary: 验证组件配置
      description: 验证组件的属性配置是否符合定义的规则
      tags:
        - 配置验证
      parameters:
        - name: componentId
          in: path
          required: true
          description: 组件ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationRequest'
      responses:
        '200':
          description: 验证完成
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ValidationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /categories:
    get:
      summary: 获取组件分类
      description: 获取所有可用的组件分类和统计信息
      tags:
        - 分类管理
      responses:
        '200':
          description: 成功返回分类列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ComponentCategory'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /themes:
    get:
      summary: 获取主题列表
      description: 获取所有可用的主题配置
      tags:
        - 主题管理
      responses:
        '200':
          description: 成功返回主题列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Theme'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    ComponentDefinition:
      type: object
      properties:
        id:
          type: string
          example: "component-basic-button"
          description: 组件唯一标识
        name:
          type: string
          example: "Button"
          description: 组件显示名称
        description:
          type: string
          example: "可点击的按钮组件"
          description: 组件描述
        version:
          type: string
          example: "1.0.0"
          description: 组件版本号
        author:
          type: string
          example: "开发团队"
          description: 组件作者
        category:
          type: string
          enum: [basic, display, layout, form, advanced, custom]
          example: "basic"
          description: 组件分类
        subcategory:
          type: string
          example: "form"
          description: 子分类
        tags:
          type: array
          items:
            type: string
          example: ["button", "click", "form"]
          description: 组件标签
        component_path:
          type: string
          example: "/components/lowcode/basic/Button"
          description: React组件文件路径
        preview_path:
          type: string
          example: "/components/lowcode/basic/Button/Preview"
          description: 预览组件文件路径
        icon_path:
          type: string
          example: "/components/lowcode/basic/Button/Icon"
          description: 图标组件文件路径
        props_schema:
          type: array
          items:
            $ref: '#/components/schemas/PropSchema'
          description: 属性定义数组
        default_props:
          type: object
          example:
            text: "Click me"
            variant: "default"
            size: "medium"
          description: 默认属性值
        default_styles:
          $ref: '#/components/schemas/ComponentStyles'
        constraints:
          $ref: '#/components/schemas/ComponentConstraints'
        validation_rules:
          type: array
          items:
            $ref: '#/components/schemas/ValidationRule'
        status:
          type: string
          enum: [draft, active, deprecated, archived]
          example: "active"
          description: 组件状态
        deprecated:
          type: boolean
          example: false
          description: 是否已废弃
        created_at:
          type: string
          format: date-time
          example: "2025-10-28T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-28T10:00:00Z"

    PropSchema:
      type: object
      properties:
        id:
          type: string
          example: "prop-button-text"
          description: 属性唯一标识
        name:
          type: string
          example: "text"
          description: 属性名称
        type:
          type: string
          enum: [string, number, boolean, color, select, array, object]
          example: "string"
          description: 属性数据类型
        label:
          type: string
          example: "按钮文字"
          description: 显示标签
        description:
          type: string
          example: "按钮上显示的文字内容"
          description: 属性描述
        required:
          type: boolean
          example: true
          description: 是否必填
        default_value:
          type: string
          example: "Click me"
          description: 默认值
        group:
          type: string
          enum: [basic, style, layout, advanced]
          example: "basic"
          description: 属性分组
        category:
          type: string
          enum: [content, appearance, behavior, layout]
          example: "content"
          description: 属性类别
        order:
          type: integer
          example: 1
          description: 显示顺序
        options:
          type: array
          items:
            $ref: '#/components/schemas/PropOption'
          description: 可选值列表
        constraints:
          $ref: '#/components/schemas/PropConstraints'
        validation:
          type: array
          items:
            $ref: '#/components/schemas/ValidationRule'
          description: 验证规则
        editor_config:
          $ref: '#/components/schemas/EditorConfig'
        responsive:
          type: boolean
          example: false
          description: 是否支持响应式配置
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/PropertyDependency'
          description: 属性依赖关系

    ComponentStyles:
      type: object
      properties:
        display:
          type: string
          example: "block"
          description: 显示属性
        width:
          oneOf:
            - type: string
              example: "100%"
            - type: number
              example: 200
          description: 宽度
        height:
          oneOf:
            - type: string
              example: "auto"
            - type: number
              example: 40
          description: 高度
        margin:
          $ref: '#/components/schemas/SpacingValue'
        padding:
          $ref: '#/components/schemas/SpacingValue'
        color:
          type: string
          example: "#000000"
          description: 文字颜色
        backgroundColor:
          type: string
          example: "#ffffff"
          description: 背景颜色
        fontSize:
          oneOf:
            - type: string
              example: "16px"
            - type: number
              example: 16
          description: 字体大小
        border:
          $ref: '#/components/schemas/BorderProperties'
        borderRadius:
          $ref: '#/components/schemas/BorderRadiusValue'
        responsive:
          type: object
          description: 响应式样式配置

    SpacingValue:
      oneOf:
        - type: string
          example: "16px"
        - type: number
          example: 16
        - type: object
          properties:
            x:
              type: number
              example: 16
            y:
              type: number
              example: 8
          description: 水平和垂直间距
        - type: object
          properties:
            top:
              type: number
              example: 8
            right:
              type: number
              example: 16
            bottom:
              type: number
              example: 8
            left:
              type: number
              example: 16
          description: 四个方向的间距

    BorderProperties:
      type: object
      properties:
        width:
          type: string
          example: "1px"
          description: 边框宽度
        style:
          type: string
          enum: [solid, dashed, dotted, double, groove, ridge, inset, outset]
          example: "solid"
          description: 边框样式
        color:
          type: string
          example: "#cccccc"
          description: 边框颜色

    BorderRadiusValue:
      oneOf:
        - type: string
          example: "4px"
        - type: number
          example: 4
        - type: object
          properties:
            topLeft:
              type: number
              example: 4
            topRight:
              type: number
              example: 4
            bottomLeft:
              type: number
              example: 4
            bottomRight:
              type: number
              example: 4
          description: 四个角的圆角

    ComponentConstraints:
      type: object
      properties:
        min_width:
          type: number
          example: 50
          description: 最小宽度
        min_height:
          type: number
          example: 20
          description: 最小高度
        max_width:
          type: number
          example: 500
          description: 最大宽度
        max_height:
          type: number
          example: 100
          description: 最大高度
        aspect_ratio:
          type: string
          example: "16:9"
          description: 宽高比
        resizable:
          type: boolean
          example: true
          description: 是否可调整大小
        draggable:
          type: boolean
          example: true
          description: 是否可拖拽

    ValidationRule:
      type: object
      properties:
        type:
          type: string
          enum: [required, min, max, minLength, maxLength, pattern, custom]
          example: "minLength"
          description: 验证类型
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
          example: 1
          description: 验证值
        message:
          type: string
          example: "内容长度不能少于1个字符"
          description: 错误提示信息

    PropOption:
      type: object
      properties:
        value:
          type: string
          example: "primary"
          description: 选项值
        label:
          type: string
          example: "主要按钮"
          description: 选项标签
        description:
          type: string
          example: "主要操作按钮，通常用于最重要的操作"
          description: 选项描述

    PropConstraints:
      type: object
      properties:
        min:
          type: number
          example: 0
          description: 最小值
        max:
          type: number
          example: 100
          description: 最大值
        step:
          type: number
          example: 1
          description: 步长
        pattern:
          type: string
          example: "^[a-zA-Z0-9]+$"
          description: 正则表达式模式

    EditorConfig:
      type: object
      properties:
        type:
          type: string
          enum: [text, number, color, select, checkbox, radio, textarea, json]
          example: "text"
          description: 编辑器类型
        placeholder:
          type: string
          example: "请输入按钮文字"
          description: 占位符文本
        help:
          type: string
          example: "按钮上显示的文字，建议不超过20个字符"
          description: 帮助提示
        config:
          type: object
          description: 编辑器特定配置

    PropertyDependency:
      type: object
      properties:
        property:
          type: string
          example: "variant"
          description: 依赖的属性名
        condition:
          type: string
          enum: [equals, not_equals, contains, greater_than, less_than]
          example: "equals"
          description: 条件类型
        value:
          type: string
          example: "outline"
          description: 条件值
        action:
          type: string
          enum: [show, hide, enable, disable]
          example: "show"
          description: 触发的动作

    CreateComponentRequest:
      type: object
      required:
        - name
        - category
        - component_path
        - preview_path
        - icon_path
      properties:
        name:
          type: string
          example: "Button"
          description: 组件名称
        description:
          type: string
          example: "可点击的按钮组件"
          description: 组件描述
        category:
          type: string
          enum: [basic, display, layout, form, advanced, custom]
          example: "basic"
          description: 组件分类
        subcategory:
          type: string
          example: "form"
          description: 子分类
        tags:
          type: array
          items:
            type: string
          example: ["button", "click", "form"]
          description: 组件标签
        component_path:
          type: string
          example: "/components/lowcode/basic/Button"
          description: React组件文件路径
        preview_path:
          type: string
          example: "/components/lowcode/basic/Button/Preview"
          description: 预览组件文件路径
        icon_path:
          type: string
          example: "/components/lowcode/basic/Button/Icon"
          description: 图标组件文件路径
        props_schema:
          type: array
          items:
            $ref: '#/components/schemas/PropSchema'
          description: 属性定义数组
        default_props:
          type: object
          example:
            text: "Click me"
            variant: "default"
          description: 默认属性值
        default_styles:
          $ref: '#/components/schemas/ComponentStyles'

    UpdateComponentRequest:
      type: object
      properties:
        name:
          type: string
          example: "Button"
          description: 组件名称
        description:
          type: string
          example: "可点击的按钮组件"
          description: 组件描述
        category:
          type: string
          enum: [basic, display, layout, form, advanced, custom]
          example: "basic"
          description: 组件分类
        tags:
          type: array
          items:
            type: string
          example: ["button", "click", "form"]
          description: 组件标签
        props_schema:
          type: array
          items:
            $ref: '#/components/schemas/PropSchema'
          description: 属性定义数组
        default_props:
          type: object
          example:
            text: "Click me"
            variant: "default"
          description: 默认属性值
        default_styles:
          $ref: '#/components/schemas/ComponentStyles'
        status:
          type: string
          enum: [draft, active, deprecated, archived]
          example: "active"
          description: 组件状态

    CreatePropRequest:
      type: object
      required:
        - name
        - type
        - label
      properties:
        name:
          type: string
          example: "text"
          description: 属性名称
        type:
          type: string
          enum: [string, number, boolean, color, select, array, object]
          example: "string"
          description: 属性数据类型
        label:
          type: string
          example: "按钮文字"
          description: 显示标签
        description:
          type: string
          example: "按钮上显示的文字内容"
          description: 属性描述
        required:
          type: boolean
          example: true
          description: 是否必填
        default_value:
          type: string
          example: "Click me"
          description: 默认值
        group:
          type: string
          enum: [basic, style, layout, advanced]
          example: "basic"
          description: 属性分组
        order:
          type: integer
          example: 1
          description: 显示顺序
        options:
          type: array
          items:
            $ref: '#/components/schemas/PropOption'
          description: 可选值列表
        validation:
          type: array
          items:
            $ref: '#/components/schemas/ValidationRule'
          description: 验证规则
        editor_config:
          $ref: '#/components/schemas/EditorConfig'

    PreviewRequest:
      type: object
      required:
        - props
      properties:
        props:
          type: object
          example:
            text: "Preview Button"
            variant: "primary"
            size: "large"
          description: 组件属性配置
        styles:
          $ref: '#/components/schemas/ComponentStyles'
        theme:
          type: string
          enum: [light, dark, high-contrast]
          example: "light"
          description: 预览主题
        viewport:
          type: object
          properties:
            width:
              type: number
              example: 1200
              description: 视口宽度
            height:
              type: number
              example: 800
              description: 视口高度
          description: 预览视口配置

    PreviewResponse:
      type: object
      properties:
        html:
          type: string
          example: "<button class=\"btn btn-primary\">Preview Button</button>"
          description: 组件HTML代码
        css:
          type: string
          example: ".btn { padding: 8px 16px; border-radius: 4px; }"
          description: 组件CSS样式
        props:
          type: object
          description: 实际使用的属性值
        styles:
          $ref: '#/components/schemas/ComponentStyles'
        render_time:
          type: number
          example: 12
          description: 渲染时间（毫秒）

    ValidationRequest:
      type: object
      required:
        - props
      properties:
        props:
          type: object
          example:
            text: ""
            variant: "invalid"
          description: 待验证的属性配置
        styles:
          $ref: '#/components/schemas/ComponentStyles'
        strict_mode:
          type: boolean
          example: true
          description: 严格模式验证

    ValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: false
          description: 验证是否通过
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
          description: 验证错误列表
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
          description: 验证警告列表
        validation_time:
          type: number
          example: 5
          description: 验证时间（毫秒）

    ValidationError:
      type: object
      properties:
        property:
          type: string
          example: "text"
          description: 出错的属性名
        message:
          type: string
          example: "按钮文字不能为空"
          description: 错误信息
        code:
          type: string
          example: "REQUIRED"
          description: 错误代码
        severity:
          type: string
          enum: [error, warning]
          example: "error"
          description: 错误级别

    ComponentCategory:
      type: object
      properties:
        name:
          type: string
          example: "basic"
          description: 分类名称
        label:
          type: string
          example: "基础组件"
          description: 分类显示名称
        description:
          type: string
          example: "最常用的基础UI组件"
          description: 分类描述
        count:
          type: integer
          example: 6
          description: 该分类下的组件数量
        icon:
          type: string
          example: "cube"
          description: 分类图标
        order:
          type: integer
          example: 1
          description: 显示顺序

    Theme:
      type: object
      properties:
        name:
          type: string
          example: "light"
          description: 主题名称
        label:
          type: string
          example: "明亮主题"
          description: 主题显示名称
        description:
          type: string
          example: "适用于白天使用的明亮主题"
          description: 主题描述
        colors:
          type: object
          example:
            primary: "#3b82f6"
            secondary: "#64748b"
            background: "#ffffff"
            foreground: "#000000"
          description: 主题颜色配置
        preview:
          type: string
          example: "/themes/light-preview.png"
          description: 主题预览图

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
          description: 当前页码
        total_pages:
          type: integer
          example: 5
          description: 总页数
        total_items:
          type: integer
          example: 100
          description: 总条目数
        per_page:
          type: integer
          example: 20
          description: 每页条目数
        has_next:
          type: boolean
          example: true
          description: 是否有下一页
        has_prev:
          type: boolean
          example: false
          description: 是否有上一页

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: 请求是否成功
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
              description: 错误代码
            message:
              type: string
              example: "请求参数验证失败"
              description: 错误信息
            details:
              type: array
              items:
                type: object
              description: 错误详情

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: 未授权访问
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: 资源冲突
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: 服务器内部错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT访问令牌

tags:
  - name: 组件管理
    description: 组件的增删改查操作
  - name: 属性管理
    description: 组件属性的配置和管理
  - name: 组件预览
    description: 组件预览和渲染功能
  - name: 配置验证
    description: 组件配置的验证功能
  - name: 分类管理
    description: 组件分类的管理
  - name: 主题管理
    description: 主题配置的管理